// Make the div behave like a button
.btn-group,
.btn-group-vertical {
  position: relative;
  display: inline-flex;
  vertical-align: middle; // match .btn alignment given font-size hack above

  > .btn {
    position: relative;
    flex: 1 1 auto;

    // Bring the hover, focused, and "active" buttons to the front to overlay
    // the borders properly
    @include hover() {
      z-index: 1;
    }
    &:focus,
    &:active,
    &.active {
      z-index: 1;
    }
  }
}

// Optional: Group multiple button groups together for a toolbar
.btn-toolbar {
  display: flex;
  flex-wrap: wrap;
  justify-content: flex-start;

  .input-group {
    width: auto;
  }
}

.btn-group:not(.btn-group-toggle) { // Boosted mod: borders are removed in .btn-group-toggle
  // Prevent double borders when buttons are next to each other
  > .btn:not(:first-child):not(.btn-icon),
  > .btn-group:not(:first-child) {
    margin-left: -$btn-border-width;
  }

  // Boosted mod: no rounded corners to reset
}

// Sizing
//
// Remix the default button sizing classes into new ones for easier manipulation.

.btn-group-sm > .btn { @extend .btn-sm; }
.btn-group-lg > .btn { @extend .btn-lg; }


//
// Split button dropdowns
//

.dropdown-toggle-split {
  padding-right: $input-btn-padding-y; // Boosted mod
  padding-left: $input-btn-padding-y; // Boosted mod
  border-color: $black;

  // Boosted mod
  :not(.dropleft) > & {
    &::after {
      transform: none;
    }

    &:not(:hover):not(:focus):not(:active) {
      border-left-color: transparent;

      &.btn-inverse::before {
        background-color: $black;
      }
    }

    &:not(:focus):not(:active) {
      &::before {
        position: absolute;
        top: -$border-width;
        bottom: -$border-width;
        left: -$border-width;
        width: $border-width;
        color: $black;
        content: "";
        background:
          linear-gradient(
            currentColor $border-width,
            transparent $border-width,
            transparent $border-width * 2.5,
            currentColor $border-width * 2.5,
            currentColor subtract(100%, $border-width * 2.5),
            transparent subtract(100%, $border-width * 2.5),
            transparent subtract(100%, $border-width),
            currentColor subtract(100%, $border-width)
          );
      }

      &.btn-inverse::before {
        color: $white;
      }
    }
  }
  // end mod

  &::after,
  .dropup &::after,
  .dropright &::after {
    margin-left: 0;
  }

  .dropleft &::before {
    margin-right: 0;
  }

  .btn:active + & {
    border-color: theme-color("primary");
  }

  .btn-group.show:not(.dropleft) > &:not(:focus):not(:active) {
    &::before {
      color: theme-color("primary");
      background-color: theme-color("primary");
    }
  }
}

.btn-sm + .dropdown-toggle-split {
  padding-right: $btn-padding-x-sm * .5;
  padding-left: $btn-padding-x-sm * .5;
}

.btn-lg + .dropdown-toggle-split {
  padding-right: $btn-padding-x-lg * .5;
  padding-left: $btn-padding-x-lg * .5;
}

// Boosted mod: no box-shadow at all

.btn-group.show .btn {
  border-color: theme-color("primary");
}


//
// Vertical button groups
//

.btn-group-vertical {
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;

  > .btn,
  > .btn-group {
    width: 100%;
  }

  > .btn:not(:first-child),
  > .btn-group:not(:first-child) {
    margin-top: -$btn-border-width;
  }

  // Boosted mod: no border-radius to reset
}


// Checkbox and radio options
//
// In order to support the browser's form validation feedback, powered by the
// `required` attribute, we have to "hide" the inputs via `clip`. We cannot use
// `display: none;` or `visibility: hidden;` as that also hides the popover.
// Simply visually hiding the inputs via `opacity` would leave them clickable in
// certain cases which is prevented by using `clip` and `pointer-events`.
// This way, we ensure a DOM element is visible to position the popover from.
//
// See https://github.com/twbs/bootstrap/pull/12794 and
// https://github.com/twbs/bootstrap/pull/14559 for more information.

.btn-group-toggle {
  > .btn,
  > .btn-group > .btn {
    margin-bottom: 0; // Override default `<label>` value
    border-color: $gray-500; // Boosted mod

    [type="radio"],
    [type="checkbox"] {
      position: absolute;
      clip: rect(0, 0, 0, 0);
      pointer-events: none;
    }

    // Boosted mod: hover = focus, active ≠ .active, focus ≠ focus-visible
    &:hover,
    &:focus,
    &.focus {
      color: $orange-2;
      background-color: $white;
      border-color: $gray-500;
    }

    &:active {
      color: $black;
      background-color: theme-color("primary");
    }

    // stylelint-disable selector-max-class
    &:not(:disabled):not(.disabled).active {
      color: $white;
      background-color: $black;
      border-color: $black;
      outline-color: $black;
    }

    @at-root .bg-dark #{&} {
      border-color: $gray-700;

      &:hover,
      &:focus,
      &.focus {
        color: $primary;
        background-color: $black;
        border-color: $gray-700;
      }

      &:not(:disabled):not(.disabled).active {
        color: $black;
        background-color: $white;
        border-color: $white;
        outline-color: $white;
      }
    }

    &:not(:disabled):not(.disabled).active.focus-visible {
      color: $black;
      background-color: theme-color("primary");
      border-color: theme-color("primary");
      outline-color: theme-color("primary");
    }
    // stylelint-enable selector-max-class
    // end mod
  }

  // Boosted mod: no border inside of .btn-group-toggle
  > .btn:not(:last-child):not(.dropdown-toggle),
  > .btn-group:not(:last-child) > .btn {
    border-right: 0;
  }

  > .btn:not(:first-child),
  > .btn-group:not(:first-child) > .btn {
    border-left: 0;
  }
  // end mod
}
